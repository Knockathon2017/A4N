<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>TripWay :: Make your trip easy</title>

    <!-- Bootstrap -->
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet">
    <link href="assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="assets/css/custom.css" rel="stylesheet">


    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>

<body>
    <div class="container-fluid header">
        <div class="row">
            <div class="col-sm-3">
                <h1>Trip<span>Way</span> | <span class="punch">Make your trip easy</span></h1>
            </div>
        </div>
    </div>
    <section class="darkSection">
        <div class="container">
            <div class="row gridResize">
                <div class="col-sm-2 col-xs-12">
                    <div class="sectionTitleDouble">
                        <p>Plan</p>
                        <h2>your <span>Trip</span></h2>
                    </div>
                </div>
                <div class="col-sm-9 col-xs-12">
                    <div class="row">
                        <div class="col-sm-4 col-xs-12">
                            <div class="searchTour">
                                <input type="text" id="result" placeholder="Current location/City" class="form-control textbox" style="padding-left:15px;">
                                <span>From</span>
                                <a href="javascript:void(0)" class="clocation" onclick="detectmylocation()" title="Click for current location"><i class="glyphicon glyphicon-map-marker" aria-hidden="true"></i></a>
                            </div>
                        </div>
                        <div class="col-sm-4 col-xs-12">
                            <div class="searchTour">
                                <input type="text" id="destinationinput" placeholder="Tourist Place" class="form-control textbox">
                                <span>To</span>
                            </div>
                        </div>
                        <div class="col-sm-1 col-xs-12">
                            <div class="searchTour">
                                <input type="number" id="timeinput" value="0" placeholder="0" class="form-control textbox">
                                <span>Time(Hrs)</span>
                            </div>
                        </div>
                        <!--<div class="col-sm-1 col-xs-12">
                            <div class="searchTour">
                                <input type="number" placeholder="0" class="form-control textbox">
                                <span>Adult</span>
                            </div>
                        </div>
                        <div class="col-sm-1 col-xs-12">
                            <div class="searchTour">
                                <input type="number" placeholder="0" class="form-control textbox">
                                <span>Child</span>
                            </div>
                        </div>
                        <div class="col-sm-1 col-xs-12">
                            <div class="searchTour">
                                <input type="number" placeholder="0" class="form-control textbox">
                                <span>Age<60</span>
                            </div>
                        </div>-->


                    </div>
                </div>
                <div class="col-sm-1 col-xs-12" style="padding:0;">
                    <a href="javascript:void(0)" onclick="changelocation()" class="btn btn-block buttonCustomPrimary">Search</a>
                </div>
            </div>
        </div>
    </section>

    <section class="front " id="introslide">
    </section>

    <section class="result hide" id="dataslide">
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-9 result">
                    <div id="map_canvas" style="position: absolute; width:100%; height:100%; left:0; top:0;"></div>
                    <div id="control_panel" style="float:right;width:30%;text-align:left;padding-top:20px">
                        <div id="directions_panel" style="margin:20px;background-color:#FFEE77;"></div>
                    </div>
                </div>
                <div class="col-sm-3 placelisting">


                </div>
            </div>
        </div>
    </section>
    </section>

    <script src="http://www.google-analytics.com/urchin.js" type="text/javascript">
    </script>
    <script type="text/javascript">
    </script>
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="assets/js/bootstrap.min.js"></script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&key=AIzaSyDVDNY_xUq0LKpNswJ_d4U5_r2u2hmd1m4"></script>
    <script>
        $('#introslide').css({
            'height': (($(window).height()) - 170) + 'px'
        });
        $(window).resize(function () {
            $('#introslide').css({
                'height': (($(window).height()) - 170) + 'px'
            });
        });

        $('.result').css({
            'height': (($(window).height()) - 40) + 'px'
        });
        $(window).resize(function () {
            $('.result').css({
                'height': (($(window).height()) - 40) + 'px'
            });
        });

        $('.placelisting').css({
            'height': (($(window).height()) - 175) + 'px'
        });
        $(window).resize(function () {
            $('.placelisting').css({
                'height': (($(window).height()) - 175) + 'px'
            });
        });
    </script>
    <script type="text/javascript">
        var directionDisplay;
        var directionsService = new google.maps.DirectionsService();
        var map;
        var myHomeLocation = "a-42/6, 6th floor, pinnacle tower, exzeo software, noida sector-62, up-201301";
        //   var map = null;
        var startLocation = null;
        var endLocation = null;
        //  var directionsService = null;
        var waypts = null;
        var polyline = new google.maps.Polyline({
            path: [],
            strokeColor: '#FF0000',
            strokeWeight: 3
        });


        function initialize(origin) {
            debugger;
            directionsDisplay = new google.maps.DirectionsRenderer();
            var india = new google.maps.LatLng(28.626663, 77.209015);
            var myOptions = {
                zoom: 6,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: india
            };
            map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
            google.maps.event.addListener(map, 'click', function () {
                infowindow.close();
            });
            directionsDisplay.setMap(map);

            var url = $("#result").val() !== undefined && $("#result").val().length > 0 ? "/callgoogleapi?q=" + $(
                "#result").val() + "" : "/callgoogleapi";
            $.ajax({
                type: "GET",
                url: url,
                error: function (jqXHR, textStatus, errorThrown) {

                    console.log("error");
                },
                success: function (data) {
                    $(".placelisting").empty();
                    // var jsonData = JSON.parse(data);
                    var jsonData = data;
                    var addressArray = [];
                    var addwithName = [];
                    if (jsonData !== undefined) {
                        for (var index = 0; index < jsonData.length; index++) {
                            var element = jsonData[index];
                            // var location = element.geometry.location;
                            var address = element.address;
                            // addressArray.push(address);
                            var obj = {
                                address: address
                            };
                            var obj1 = {
                                address: address,
                                name: element.name
                            }
                            addressArray.push(obj);
                            addwithName.push(obj1);
                            //   var place_name = element.name;
                        }
                        console.log(addressArray);
                        // myfunc(data);
                        createDiv(data);
                    }
                    // if (("#result").val(). === undefined || $("#result").val().length <= 0) {
                    //     window.alert("please select Currentlocation/City is mandatory!");
                    // } else {
                    if ($("#destinationinput").val() !== undefined && $("#destinationinput").val().length >
                        0) {
                        var dest = "";
                        for (i = 0; i < addwithName.length; i++) {
                            addwithName[i].name.trim();
                            $("#destinationinput").val().trim();
                            if (addwithName[i].name.toLowerCase() == $("#destinationinput").val().toLowerCase()) {
                                var dest = addwithName[i].address;
                                DestinationSourceAndTimerRoute(directionsService, directionsDisplay,
                                    addwithName,
                                    dest, origin, parseInt($(
                                        "#timeinput").val()));
                                break;
                            }
                        }
                        if (dest == "") {
                            window.alert("Please select a correct destination!");
                        }
                    } else if (parseInt($("#timeinput").val()) !== undefined && parseInt($("#timeinput")
                            .val()) !==
                        0) {
                        SourceAndTimerRoute(directionsService, directionsDisplay, addwithName,
                            origin, parseInt($("#timeinput").val()));
                    } else {
                        calculateAndDisplayRoute(directionsService, directionsDisplay, addwithName,
                            origin);
                    }
                    // }
                }
            });
        }

        //initail call on load
        function calculateAndDisplayRoute(directionsService, directionsDisplay, addwithName, origin) {
            var waypts = [];
            // var checkboxArray = document.getElementById('waypoints');
            var checkboxArray = addwithName;
            for (var i = 0; i < checkboxArray.length; i++) {
                waypts.push({
                    location: checkboxArray[i].address,
                    stopover: true
                });
            }
            var myorigin = origin === undefined || origin.length <= 0 ? myHomeLocation : origin;
            directionsService.route({
                origin: myorigin,
                // destination: document.getElementById('end').value,
                //  origin: checkboxArray[0].address,
                destination: checkboxArray[checkboxArray.length - 1].address,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    //  markerset(response,addwithName);
                    waypts = [];
                    var bounds = new google.maps.LatLngBounds();
                    var route = response.routes[0];
                    startLocation = new Object();
                    endLocation = new Object();

                    var path = response.routes[0].overview_path;
                    var legs = response.routes[0].legs;
                    // var route = response.routes[0];

                    for (i = 0; i < legs.length; i++) {
                        if (i == 0) {
                            startLocation.latlng = legs[i].start_location;
                            startLocation.address = legs[i].start_address;
                            startLocation.duration = legs[i].duration.text;
                            startLocation.distance = legs[i].distance.text;
                            startLocation.marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                                "green", startLocation.duration, startLocation.distance);
                        } else {
                            waypts[i] = new Object();
                            waypts[i].latlng = legs[i].start_location;
                            waypts[i].address = legs[i].start_address;
                            waypts[i].duration = legs[i].duration.text;
                            waypts[i].distance = legs[i].distance.text;
                            waypts[i].marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                                "yellow", waypts[i].duration, waypts[i].distance);
                        }
                        endLocation.latlng = legs[i].end_location;
                        endLocation.address = legs[i].end_address;
                        endLocation.duration = legs[i].duration.text;
                        endLocation.distance = legs[i].distance.text;
                        var steps = legs[i].steps;
                        // alert("processing "+steps.length+" steps");
                        for (j = 0; j < steps.length; j++) {
                            var nextSegment = steps[j].path;
                            for (k = 0; k < nextSegment.length; k++) {
                                polyline.getPath().push(nextSegment[k]);
                                bounds.extend(nextSegment[k]);
                            }
                        }
                    }

                    polyline.setMap(map);
                    map.fitBounds(bounds);
                    endLocation.marker = createMarker(endLocation.latlng, addwithName, endLocation.address,
                        "red", endLocation.duration, endLocation.distance);
                }
            });
        }
        // call using timer
        function SourceAndTimerRoute(directionsService, directionsDisplay, addwithName, source, timer) {
            var waypts = [];
            // var checkboxArray = document.getElementById('waypoints');
            var checkboxArray = addwithName;
            for (var i = 0; i < checkboxArray.length; i++) {
                waypts.push({
                    location: checkboxArray[i].address,
                    stopover: true
                });
            }
            directionsService.route({
                // origin: document.getElementById('start').value,
                // destination: document.getElementById('end').value,
                origin: source,
                destination: checkboxArray[checkboxArray.length - 1].address,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    var time = timer * 60;
                    var drawloc = TimerCalc(response, time);
                    //console.log(drawloc);
                    //   directionsDisplay.setDirections(drawloc);
                    waypts = [];
                    var bounds = new google.maps.LatLngBounds();
                    var route = response.routes[0];
                    startLocation = new Object();
                    endLocation = new Object();

                    var path = response.routes[0].overview_path;
                    var legs = response.routes[0].legs;
                    // var route = response.routes[0];

                    for (i = 0; i < legs.length; i++) {
                        if (i == 0) {
                            startLocation.latlng = legs[i].start_location;
                            startLocation.address = legs[i].start_address;
                            startLocation.duration = legs[i].duration.text;
                            startLocation.distance = legs[i].distance.text;
                            startLocation.marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                                "green", startLocation.duration, startLocation.distance);
                        } else {
                            waypts[i] = new Object();
                            waypts[i].latlng = legs[i].start_location;
                            waypts[i].address = legs[i].start_address;
                            waypts[i].duration = legs[i].duration.text;
                            waypts[i].distance = legs[i].distance.text;
                            waypts[i].marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                                "yellow", waypts[i].duration, waypts[i].distance);
                        }
                        endLocation.latlng = legs[i].end_location;
                        endLocation.address = legs[i].end_address;
                        endLocation.duration = legs[i].duration.text;
                        endLocation.distance = legs[i].distance.text;
                        var steps = legs[i].steps;
                        // alert("processing "+steps.length+" steps");
                        for (j = 0; j < steps.length; j++) {
                            var nextSegment = steps[j].path;
                            for (k = 0; k < nextSegment.length; k++) {
                                polyline.getPath().push(nextSegment[k]);
                                bounds.extend(nextSegment[k]);
                            }
                        }
                    }

                    polyline.setMap(map);
                    map.fitBounds(bounds);
                    endLocation.marker = createMarker(endLocation.latlng, addwithName, endLocation.address,
                        "red", endLocation.duration, endLocation.distance);
                }
            });
        }

        // call using timerwith destination
        function DestinationSourceAndTimerRoute(directionsService, directionsDisplay, addwithName, dest, source, timer) {
            var waypts = [];
            var checkboxArray = addwithName;
            directionsService.route({
                origin: source,
                destination: dest,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    if (timer == 0 || timer === undefined) 
                    // {
                    //     waypts = [];
                    //     var bounds = new google.maps.LatLngBounds();
                    //     var route = response.routes[0];
                    //     startLocation = new Object();
                    //     endLocation = new Object();

                    //     var path = response.routes[0].overview_path;
                    //     var legs = response.routes[0].legs;
                    //     // var route = response.routes[0];

                    //     for (i = 0; i < legs.length; i++) {
                    //         if (i == 0) {
                    //             startLocation.latlng = legs[i].start_location;
                    //             startLocation.address = legs[i].start_address;
                    //             startLocation.duration = legs[i].duration.text;
                    //             startLocation.distance = legs[i].distance.text;
                    //             startLocation.marker = createMarker(legs[i].start_location, addwithName, legs[i]
                    //                 .start_address,
                    //                 "green", startLocation.duration, startLocation.distance);
                    //         }
                    //         // } else {
                    //         //     waypts[i] = new Object();
                    //         //     waypts[i].latlng = legs[i].start_location;
                    //         //     waypts[i].address = legs[i].start_address;
                    //         //     waypts[i].duration = legs[i].duration.text;
                    //         //     waypts[i].distance = legs[i].distance.text;
                    //         //     waypts[i].marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                    //         //         "yellow", waypts[i].duration, waypts[i].distance);
                    //         // }
                    //         endLocation.latlng = legs[i].end_location;
                    //         endLocation.address = legs[i].end_address;
                    //         endLocation.duration = legs[i].duration.text;
                    //         endLocation.distance = legs[i].distance.text;
                    //         var steps = legs[i].steps;
                    //         // alert("processing "+steps.length+" steps");
                    //         for (j = 0; j < steps.length; j++) {
                    //             var nextSegment = steps[j].path;
                    //             for (k = 0; k < nextSegment.length; k++) {
                    //                 polyline.getPath().push(nextSegment[k]);
                    //                 bounds.extend(nextSegment[k]);
                    //             }
                    //         }
                    //     }

                    //     polyline.setMap(map);
                    //     map.fitBounds(bounds);
                    //     endLocation.marker = createMarker(endLocation.latlng, addwithName, endLocation.address,
                    //         "red", endLocation.duration, endLocation.distance);
                    // }
                    directionsDisplay.setDirections(response);
                    else {
                        var timeinmin = timer * 60;
                        //var timeinmin = 65;
                        var route1 = response.routes[0];
                        if (timeinmin > parseInt(route1.legs[0].duration.text)) {
                            for (var i = 0; i < checkboxArray.length; i++) {
                                waypts.push({
                                    location: checkboxArray[i].address,
                                    stopover: true
                                });
                            }
                            // var destin =
                            //     "Mehrauli-Badarpur Road, Village : Said-ul-Ajaib, Near Saket Metro Station, New Delhi, Delhi 110030, India";
                            directionsService.route({
                                origin: source,
                                destination: dest,
                                waypoints: waypts,
                                optimizeWaypoints: true,
                                travelMode: 'DRIVING'
                            }, function (response, status) {
                                if (status === 'OK') {
                                    debugger;
                                    TimerSDCalc(response, timeinmin, source, dest, addwithName);
                                }
                                // } else {
                                //     window.alert('Directions request failed due to ' + status);
                                // }
                            });
                        } else {
                            window.alert('timer is wrong estimate...');
                        }
                        // var route = response.routes[0];
                    }
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function detectmylocation() {
            document.getElementById("result").value = myHomeLocation;
        }

        function changelocation() {
            debugger;
            if ($("#result").val() !== undefined && $("#result").val().length > 0) {
                $("#dataslide").removeClass("hide");
                $("#introslide").addClass("hide");
                initialize($("#result").val());
            } else {
                window.alert("Please select Current Location/ City is mandatory!");
            }
        }

        //TimerCalculator
        function TimerCalc(res, timerhour) {
            var timercall = res.routes[0].legs;
            var sum = 0;
            for (i = 0; i < timercall.length; i++) {
                if (sum >= timerhour) {
                    break;
                } else
                    sum = sum + parseInt(timercall[i].duration.text) + 60
            }
            //for (j = 0; j < res.geocoded_waypoints.length; j++) {
            //   if (j >= i) {
            // res.geocoded_waypoints.slice(0, j);
            res.geocoded_waypoints = res.geocoded_waypoints.slice(0, i);
            res.routes[0].legs = res.routes[0].legs.slice(0, i);
            res.routes[0].waypoint_order = res.routes[0].waypoint_order.slice(0, i);


            res.request.destination.query = res.routes[0].legs[i - 1].end_address;
            return res;
        }
        //Timerwith source and destinationCalculator
        function TimerSDCalc(res, timermin, source, dest, addwithName) {
            var newlocat = [];
            var waypts = [];
            var timercall = res.routes[0].legs;
            var sum = 0;
            newlocat.push(timercall[timercall.length - 1].end_address);
            sum = sum + parseInt(timercall[timercall.length - 1].duration.text)
            for (i = 0; i <= timercall.length - 1; i++) {
                if (sum >= timermin) {
                    break;
                } else {
                    //var loc =timercall[i].end_address;
                    newlocat.push(timercall[i].end_address);
                    sum = sum + parseInt(timercall[i].duration.text) + 60;
                }
            }
            for (var i = 0; i < newlocat.length; i++) {
                waypts.push({
                    location: newlocat[i],
                    stopover: true
                });
                directionsService.route({
                    origin: source,
                    destination: dest,
                    waypoints: waypts,
                    optimizeWaypoints: true,
                    travelMode: 'DRIVING'
                }, function (response, status) {
                    if (status === 'OK') {
                        waypts = [];
                        var bounds = new google.maps.LatLngBounds();
                        var route = response.routes[0];
                        startLocation = new Object();
                        endLocation = new Object();

                        var path = response.routes[0].overview_path;
                        var legs = response.routes[0].legs;
                        // var route = response.routes[0];

                        for (i = 0; i < legs.length; i++) {
                            if (i == 0) {
                                startLocation.latlng = legs[i].start_location;
                                startLocation.address = legs[i].start_address;
                                startLocation.duration = legs[i].duration.text;
                                startLocation.distance = legs[i].distance.text;
                                startLocation.marker = createMarker(legs[i].start_location, addwithName, legs[i]
                                    .start_address,
                                    "green", startLocation.duration, startLocation.distance);
                            } else {
                                waypts[i] = new Object();
                                waypts[i].latlng = legs[i].start_location;
                                waypts[i].address = legs[i].start_address;
                                waypts[i].duration = legs[i].duration.text;
                                waypts[i].distance = legs[i].distance.text;
                                waypts[i].marker = createMarker(legs[i].start_location, addwithName, legs[i].start_address,
                                    "yellow", waypts[i].duration, waypts[i].distance);
                            }
                            endLocation.latlng = legs[i].end_location;
                            endLocation.address = legs[i].end_address;
                            endLocation.duration = legs[i].duration.text;
                            endLocation.distance = legs[i].distance.text;
                            var steps = legs[i].steps;
                            // alert("processing "+steps.length+" steps");
                            for (j = 0; j < steps.length; j++) {
                                var nextSegment = steps[j].path;
                                for (k = 0; k < nextSegment.length; k++) {
                                    polyline.getPath().push(nextSegment[k]);
                                    bounds.extend(nextSegment[k]);
                                }
                            }
                        }

                        polyline.setMap(map);
                        map.fitBounds(bounds);
                        endLocation.marker = createMarker(endLocation.latlng, addwithName, endLocation.address,
                            "red", endLocation.duration, endLocation.distance);
                        // directionsDisplay.setDirections(response);
                        // var route = response.routes[0];
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            }
        }

        //TimerCalculator
        function TimerCalcWithDestination(res, timerhour, detination) {
            debugger;
            var timercall = res.routes[0].legs;
            var sum = 0;
            for (i = 0; i < timercall.length; i++) {
                if (sum >= timerhour) {
                    break;
                } else
                    sum = sum + parseInt(timercall[i].duration.text) + 60
            }
            res.geocoded_waypoints = res.geocoded_waypoints.slice(0, i);
            res.routes[0].legs = res.routes[0].legs.slice(0, i);
            res.routes[0].waypoint_order = res.routes[0].waypoint_order.slice(0, i);
            debugger;
            return res;
        }

        //filter exclude
        // function excludeFilter(directionsService, directionsDisplay, addressArray,excludearray) {
        //     var waypts = [];
        //     // var checkboxArray = document.getElementById('waypoints');
        //     var checkboxArray = addressArray;
        //     var index = checkboxArray.indexOf(excludearray);
        //     checkboxArray.splice(index,1);
        //     directionsService.route({
        //         origin: "TATA Housing Group, A-13/1, Synergy Tower, 5th Floor, Sector-62, Block B, Industrial Area, Sector 62, Noida, Uttar Pradesh 201301, India",
        //         // destination: document.getElementById('end').value,
        //         //  origin: checkboxArray[0].address,
        //         destination: checkboxArray[checkboxArray.length - 1].address,
        //         waypoints: waypts,
        //         optimizeWaypoints: true,
        //         travelMode: 'DRIVING'
        //     }, function (response, status) {
        //         if (status === 'OK') {
        //             directionsDisplay.setDirections(response);
        //             }
        //         } else {
        //             window.alert('Directions request failed due to ' + status);
        //         }
        //     });

        //     }
        // }


        function createDiv(data) {
            var $mainContainer = $(".placelisting");
            var arr = [];

            for (i = 0; i < data.length; i++) {
                var randomInteger = Math.floor(Math.random() * 5) + 1;
                var starelement = "";
                for (var index = 1; index <= randomInteger; index++) {
                    arr.push(
                        '<span class="icon-ic item__star"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" tabindex="-1" width="12" height="12" viewBox="0 0 12 12"><path class="svg-color--primary" fill="#F6AB3F" d="M11.988 5.21c-.052-.275-.27-.488-.545-.534l-3.604-.6L6.63.455C6.542.184 6.287 0 6 0s-.542.184-.632.456L4.16 4.076l-3.603.6c-.275.046-.493.26-.545.533-.052.273.072.55.312.695L3.2 7.63l-1.165 3.493c-.093.28.01.59.25.758.115.08.25.12.382.12.148 0 .295-.05.416-.146L6 9.52l2.917 2.333c.12.098.27.147.416.147.133 0 .267-.04.38-.12.244-.17.346-.478.252-.758L8.8 7.63l2.876-1.725c.24-.144.364-.422.312-.696z"></path></svg></span>'
                    );
                }
                starelement = arr.join("");
                arr = [];
                var divaddress = data[i].address;
                var newDiv = $(
                    '<div class="row _placelisting"> <div class="col-sm-4" style="padding-right:0;"> <img onclick=tickfunc(); src="' +
                    data[i].icon +
                    '" class="img-responsive" alt=""> <div itemprop="name" class="star"> <div class="item__stars-badges"> <div class="item__stars-wrp">' +
                    starelement +
                    '</div> </div> </div> </div> <div class="col-sm-8"> <div class="itemdetails"> <h3>' +
                    data[i].name + '</h3> <p id=' + data[i].name.split(" ").join("_") + '>' + data[i].address +
                    '</p> <span class="visittime"><i class="glyphicon glyphicon-time" aria-hidden="true"></i> 2Hrs</span> <span class="visittime"><i class="glyphicon glyphicon-thumbs-up" aria-hidden="true"></i> ' +
                    data[i].rating +
                    '</span> <a class="exclude ' + data[i].name.split(" ").join("_") +
                    '"><span class="glyphicon glyphicon-remove-circle" aria-hidden="true"></span> exclude</a> </div> </div> </div>'
                );
                $('a.exclude').click(function () {
                    var clickedItemAddress = $("#Jantar_Mantar").text();
                    $(this).parents().closest("div.row._placelisting").animate({
                        opacity: 'hide',
                        left: '200px',
                    }, 'slow', 'linear', function () {
                        $(this).remove();
                    });
                })
                $mainContainer.append(newDiv);
            }
        }

        var infowindow = new google.maps.InfoWindow({
            size: new google.maps.Size(150, 50)
        });

        var icons = new Array();
        icons["red"] = new google.maps.MarkerImage("http://www.geocodezip.com/mapIcons/marker_red.png",
            // This marker is 20 pixels wide by 34 pixels tall.
            new google.maps.Size(20, 34),
            // The origin for this image is 0,0.
            new google.maps.Point(0, 0),
            // The anchor for this image is at 9,34.
            new google.maps.Point(9, 34));

        function getMarkerImage(iconColor) {
            if ((typeof (iconColor) == "undefined") || (iconColor == null)) {
                iconColor = "red";
            }
            if (!icons[iconColor]) {
                icons[iconColor] = new google.maps.MarkerImage("http://www.geocodezip.com/mapIcons/marker_" + iconColor +
                    ".png",
                    // This marker is 20 pixels wide by 34 pixels tall.
                    new google.maps.Size(20, 34),
                    // The origin for this image is 0,0.
                    new google.maps.Point(0, 0),
                    // The anchor for this image is at 6,20.
                    new google.maps.Point(9, 34));
            }
            return icons[iconColor];

        }

        var iconImage = new google.maps.MarkerImage('mapIcons/marker_red.png',
            // This marker is 20 pixels wide by 34 pixels tall.
            new google.maps.Size(20, 34),
            // The origin for this image is 0,0.
            new google.maps.Point(0, 0),
            // The anchor for this image is at 9,34.
            new google.maps.Point(9, 34));
        var iconShadow = new google.maps.MarkerImage('http://www.google.com/mapfiles/shadow50.png',
            // The shadow image is larger in the horizontal dimension
            // while the position and offset are the same as for the main image.
            new google.maps.Size(37, 34),
            new google.maps.Point(0, 0),
            new google.maps.Point(9, 34));
        var iconShape = {
            coord: [9, 0, 6, 1, 4, 2, 2, 4, 0, 8, 0, 12, 1, 14, 2, 16, 5, 19, 7, 23, 8, 26, 9, 30, 9, 34, 11, 34,
                11, 30, 12, 26, 13, 24, 14, 21, 16, 18, 18, 16, 20, 12, 20, 8, 18, 4, 16, 2, 15, 1, 13, 0
            ],
            type: 'poly'
        };

        function createMarker(latlng, label, html, color, time, distance) {
            var lab = html === "Block A 42/6, A 42, Block A, Sector 62, Noida, Uttar Pradesh 201309, India" ?
                "Exzeo Software Pvt. Ltd" : "Tourist Place";
            for (i = 0; i < label.length; i++) {
                var n = html.indexOf(",", 0);
                var res = html.substring(0, n);
                var n1 = label[i].address.indexOf(",", 0);
                var res1 = label[i].address.substring(0, n1);
                if (res1 === "New Delhi")
                    res1 = "Delhi";
                if (res1 == "Mathura Rd")
                    res1 = "Mathura Road";
                if (res1.toLowerCase() === res.toLowerCase()) {
                    lab = label[i].name;
                }
            }
            var contentString = '<b>' + lab + '</b><br>' + html + '<br>' + "Travelling Time: " + time + '<br>' +
                "Distance: " + distance;
            var marker = new google.maps.Marker({
                position: latlng,
                draggable: false,
                map: map,
                shadow: iconShadow,
                icon: getMarkerImage(color),
                shape: iconShape,
                title: lab,
                zIndex: Math.round(latlng.lat() * -100000) << 5
            });

            google.maps.event.addListener(marker, 'click', function () {
                debugger;
                infowindow.setContent(contentString);
                infowindow.open(map, marker);
            });
            return marker;
        }
    </script>
</body>

</html>